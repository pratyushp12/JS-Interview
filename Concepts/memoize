Syncronous:

Using Object:


function memoize(fn) {
    const cache = {}
    return function() {
        console.log(arguments);  // [Arguments] { '0': 10 }
      const args = JSON.stringify(arguments);
      console.log(arguments); // [Arguments] { '0': 10 }
      console.log(args); // {"0":10}
      if (cache[args]) {
        return cache[args]
      }
      const evaluatedValue = fn.apply(this, arguments);
      cache[args] = evaluatedValue;
      return evaluatedValue;
    }
  }
  

  function factorial(n) {
    if(n === 0 || n === 1) {
      return 1
    }
    return factorial(n-1) * n; 
 }

 const memoizedFactorial = memoize(factorial);
 console.log(memoizedFactorial(10)); // 3628800


----------------------------------------------------------------
Using Maps:


function memoize(fn) {
    let cache= new Map();
    return function(...args) {
        let key = JSON.stringify(args);
        if(cache.has(key)){
            return cache.get(key);
        }
        else{
        let ans=fn(...args)
        cache.set(key, ans);
        return ans;
        }
    }
}


/** 
 * let callCount = 0;
 * const memoizedFn = memoize(function (a, b) {
 *	 callCount += 1;
 *   return a + b;
 * })
 * memoizedFn(2, 3) // 5
 * memoizedFn(2, 3) // 5
 * console.log(callCount) // 1 
 */

------------------------------------------------------------------
Memoize Async calls:



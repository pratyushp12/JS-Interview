/*Polyfill for Snchronous Promise with only resolve as params


class MyPromise{
    resolvedData; //public fields
    isResolved=false;
    constructor(executor){

        const resolve=(value)=>{
            this.resolvedData=value;
            this.isResolved=true;
        }

        executor(resolve);
    }
    then(fn){
        fn(this.resolvedData);
    }
}

new MyPromise((resolve)=>{
    resolve(100);
   // setTimeout(()=>{resolve(10);},1000)
    
}).then(res=>console.log(res));

*/

//----------------------------------------------------------

/* Promise with Async Promise with resolve as only param 


class MyPromise{
    resolvedData; //public fields
    isResolved=false;
    thenFunc;
    constructor(executor){

        const resolve=(value)=>{
            this.resolvedData=value;
            this.isResolved=true;
            if(typeof this.thenFunc=== 'function') //this is to avoid undefined value of thenFunc when Promise is synchronous
            this.thenFunc(this.resolvedData);
        }

        executor(resolve);
    }
    then(fn){
        this.thenFunc=fn  //stores the context because if we don't store then we cannot call this on line 12
        if(this.isResolved)
        this.thenFunc(this.resolvedData);
    }
}

new MyPromise((resolve)=>{
    // resolve(100);
    setTimeout(()=>{resolve(10);},1000)
    
}).then(res=>console.log(res));

*/

//-------------------------------------------------------------------------------------

/* Promise with then chaining and sync and async operation


class MyPromise{
    resolvedData; //public fields
    isResolved=false;
    resolvedChain=[];
    constructor(executor){

        const resolve=(value)=>{
            this.resolvedData=value;
            this.isResolved=true;
            if(this.resolvedChain.length)
            this.resolvedChain.reduce((acc,fn)=>fn(acc),this.resolvedData);
        }

        executor(resolve);
    }
    then(fn){
        this.resolvedChain.push(fn); 
        if(this.isResolved)
        this.resolvedChain.reduce((acc,fn)=>fn(acc),this.resolvedData);
        return this;
    }
    
}

new MyPromise((resolve)=>{
     //resolve(100);
    setTimeout(()=>{resolve(10);},1000)
    
}).then(res=>res*5).then(res=>console.log(res));

*/

----------------------------------------------------------------------------------------

/*Promise with both resolve & reject


class MyPromise{
    resolvedData; //public fields
    rejectData;

    isResolved=false;
    isRejected=false;

    resolvedChain=[];
    rejectChain=[];

    constructor(executor){

        const resolve=(value)=>{
            this.resolvedData=value;
            this.isResolved=true;
            if(this.resolvedChain.length)
            this.resolvedChain.reduce((acc,fn)=>fn(acc),this.resolvedData);
        }

        const reject=(value)=>{
            this.rejectData=value;
            this.isRejected=true;
            if(this.rejectChain.length)
            this.rejectChain.reduce((acc,fn)=>fn(acc),this.rejectData);
        }

        executor(resolve,reject);
    }
    then(fn){
        this.resolvedChain.push(fn); 
        if(this.isResolved)
        this.resolvedChain.reduce((acc,fn)=>fn(acc),this.resolvedData);
        return this;
    }

    catch(fn){
        this.rejectChain.push(fn);
        if(this.isRejected)
        this.rejectChain.reduce((acc,fn)=>fn(acc),this.rejectData);
        return this;
    }
    
}

new MyPromise((resolve,reject)=>{
     reject(100);
    //setTimeout(()=>{reject(10);},1000)
    
}).catch(res=>res*5).catch(res=>console.log(res));

*/

----------------------------------------------------------------------------------------------

/* Finally() added */


class MyPromise{
    resolvedData; //public fields
    rejectData;

    isResolved=false;
    isRejected=false;

    resolvedChain=[];
    rejectChain=[];

    constructor(executor){

        const resolve=(value)=>{
            this.resolvedData=value;
            this.isResolved=true;
            if(this.resolvedChain.length)
            this.resolvedChain.reduce((acc,fn)=>fn(acc),this.resolvedData);
        }

        const reject=(value)=>{
            this.rejectData=value;
            this.isRejected=true;
            if(this.rejectChain.length)
            this.rejectChain.reduce((acc,fn)=>fn(acc),this.rejectData);
        }

        executor(resolve,reject);
    }
    then(fn){
        this.resolvedChain.push(fn); 
        if(this.isResolved)
        this.resolvedChain.reduce((acc,fn)=>fn(acc),this.resolvedData);
        return this;
    }

    catch(fn){
        this.rejectChain.push(fn);
        if(this.isRejected)
        this.rejectChain.reduce((acc,fn)=>fn(acc),this.rejectData);
        return this;
    }

    finally(fn){
        this.rejectChain.push(fn);
        this.resolvedChain.push(fn);

        if(this.isResolved)
        this.resolvedChain.reduce((acc,fn)=>fn(acc),this.resolvedData);

        if(this.isRejected)
        this.rejectChain.reduce((acc,fn)=>fn(acc),this.rejectData);
    }
    
}

new MyPromise((resolve,reject)=>{
     //reject(100);
    setTimeout(()=>{reject(10);},1000)
    
}).catch(res=>res*5).finally(res=>console.log(res));

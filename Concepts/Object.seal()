By default, objects are extensible (new properties can be added to them). Sealing an object prevents new properties from being added and marks all existing properties 
as non-configurable. This has the effect of making the set of properties on the object fixed. Making all properties non-configurable also prevents them from being converted
from data properties to accessor properties and vice versa, but it does not prevent the values of data properties from being changed. 
Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a 
TypeError (most commonly, although not exclusively, when in strict mode code).



Comparison to Object.freeze()
Existing properties in objects frozen with Object.freeze() are made immutable. Objects sealed with Object.seal() can have their existing properties changed.

const object1 = {
  property1: 42
};

Object.seal(object1);
object1.property1 = 33;
console.log(object1.property1);
// expected output: 33

delete object1.property1; // cannot delete when sealed
console.log(object1.property1);
// expected output: 33

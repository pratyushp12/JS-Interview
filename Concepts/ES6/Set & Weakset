Adding item to the set

eg1:
let set = new Set('pratyush');
/* set.add(); */
console.log(set.size)  // 8

eg2:
let set = new Set();
set.add(1);
set.add(2);
set.add(3);
set.add(4);
set.add(4);   //ignores the duplicate values
set.add('4');
set.add('My name is Prashant Yadav');
set.add(undefined);
set.add({a: 0, b: 1});
set.add(null);
console.log(set.size); // 9


Checking if item is present in the set
set.add(document.body);
set.has(document.querySelector('body')); // true
console.log(set.has(5)); // false
console.log(set.has(4)); // true


Remove item from the set
console.log(set.size); // 9
set.delete(null);    // Remove null
console.log(set.size); // 8
set.clear();         // Remove all items
console.log(set.size); // 0

***IMP***
Iterating with javascript Set
Simple Iteration
let set = new Set();
set.add(1);
set.add(2);
set.add(3);
set.add(4);
//foreach loop
set.forEach((e) => {console.log(e);});
// 1
// 2
// 3
// 4

//for of loop
for (let item of set) {
  console.log(item);
}
// 1
// 2
// 3
// 4

Iterating objects of Set
let set = new Set();
set.add(1);
set.add('pratyush');
set.add({a: 1, b: 2, c: 3, d: 4});

for (let item of set.keys()) {
  console.log(item);
}
// 1
// pratyush
// {a: 1, b: 2, c: 3, d: 4}

for (let item of set.values()) {
  console.log(item);
}
// 1
// prashant
// {a: 1, b: 2, c: 3, d: 4}

for (let [key, value] of set.entries()) {
  console.log(key, value);
}
// 1 1
// pratyush pratyush
// {a: 1, b: 2, c: 3, d: 4} {a: 1, b: 2, c: 3, d: 4}
let set = new Set();
set.add(1);
set.add('pratyush');
set.add({a: 1, b: 2, c: 3, d: 4});

// using `.next()`
const iterator = set.values();

console.log(iterator.next().value);
// 1

console.log(iterator.next().value);
// pratyush

console.log(iterator.next().value);
// {a: 1, b: 2, c: 3, d: 4}



-----------------------------------------------------------------------

WeakSets
A WeakSet is same as the Set except it can only store objects.


Syntax
let user = {name: "Pratyush", age: 26};
const users = new WeakSet(user);

Difference between Sets and WeakSets
WeakSets can only store objects unlike the Sets.
The add() method throws error when non-oject item is passed to the WeakSet.
The has() and delete() method returns false for non-object.
WeakSets are not Iteratable.
They do not have size and foreach as well.
The WeakSet is weak, meaning references to objects in a WeakSet are held weakly. 
If no other references to a value stored in the WeakSet exist, those values can be garbage collected.
